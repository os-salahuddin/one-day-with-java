Encapsulation:

The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users. To achieve this, you must:
    declare class variables/attributes as private
    provide public get and set methods to access and update the value of a private variable

---------------------------------------
Java Packages & API:

A package in Java is used to group related classes. Think of it as a folder in a file directory. We use packages to avoid name conflicts, and to write a better maintainable code. Packages are divided into two categories:

    Built-in Packages (packages from the Java API)
    User-defined Packages (create your own packages)

 -------------------------------------------
 Java Inheritance (Subclass and Superclass)

 In Java, it is possible to inherit attributes and methods from one class to another. We group the "inheritance concept" into two categories:
     subclass (child) - the class that inherits from another class
     superclass (parent) - the class being inherited from

 ----------------------------------------------

The final Keyword
If you don't want other classes to inherit from a class, use the final keyword:
-----------------------------------------------
Interfaces

Another way to achieve abstraction in Java, is with interfaces.

An interface is a completely "abstract class" that is used to group related methods with empty bodies:
--------------------------------------------------

Abstract Classes and Methods

Data abstraction is the process of hiding certain details and showing only essential information to the user.
Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).

The abstract keyword is a non-access modifier, used for classes and methods:

    Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).

    Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).

An abstract class can have both abstract and regular methods:

-------------------------------------------------
Convention over Configuration (often abbreviated as CoC) is a software design principle that aims to reduce the amount of decision-making a developer has to do by following predefined, sensible defaults for most settings and behaviors. The idea is that if developers follow these conventions, they won’t need to spend time writing configurations for common or standard behavior.
Key Concepts:

    Conventions as Defaults: The framework or tool assumes a standard way of doing things. If you follow this convention, you don’t need to specify or configure anything. However, if you deviate from the conventions, you can override them with configurations.

    Less Configuration: By adhering to conventions, developers can write less boilerplate code or configurations (like XML or YAML) because the framework "knows" the defaults based on naming conventions, folder structures, or coding patterns.

    Streamlining Development: This approach speeds up the development process, as developers can rely on established conventions and avoid configuration-heavy environments, which can get complex over time.

Examples:

    Ruby on Rails: Rails uses convention over configuration extensively. For example, if you create a User model, Rails expects a corresponding users table in the database by default. If you want to use a different table name, you'd need to configure it explicitly.

    Spring Boot (Java): Spring Boot automatically configures various components like database connections or security based on a set of defaults. If your application follows these defaults, no additional configuration is required.

Benefits:

    Faster Development: Developers can focus on writing the actual business logic instead of spending time on configuration.
    Reduced Complexity: Fewer configuration files lead to cleaner codebases.

Drawbacks:

    Learning Curve: Developers need to learn and understand the framework’s conventions.
    Less Flexibility: Sometimes, conventions may not fit every use case, so customization might be needed, which requires overriding the defaults.

In summary, Convention over Configuration simplifies software development by providing reasonable defaults and reducing the need for manual setup, which increases productivity when conventions are followed.