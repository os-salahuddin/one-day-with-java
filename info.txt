Encapsulation:

The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users. To achieve this, you must:
    declare class variables/attributes as private
    provide public get and set methods to access and update the value of a private variable

---------------------------------------
Java Packages & API:

A package in Java is used to group related classes. Think of it as a folder in a file directory. We use packages to avoid name conflicts, and to write a better maintainable code. Packages are divided into two categories:

    Built-in Packages (packages from the Java API)
    User-defined Packages (create your own packages)

 -------------------------------------------
 Java Inheritance (Subclass and Superclass)

 In Java, it is possible to inherit attributes and methods from one class to another. We group the "inheritance concept" into two categories:
     subclass (child) - the class that inherits from another class
     superclass (parent) - the class being inherited from

 ----------------------------------------------

The final Keyword
If you don't want other classes to inherit from a class, use the final keyword:
-----------------------------------------------
Interfaces

Another way to achieve abstraction in Java, is with interfaces.

An interface is a completely "abstract class" that is used to group related methods with empty bodies:
--------------------------------------------------

Abstract Classes and Methods

Data abstraction is the process of hiding certain details and showing only essential information to the user.
Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).

The abstract keyword is a non-access modifier, used for classes and methods:

    Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).

    Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).

An abstract class can have both abstract and regular methods:

